using System;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;


namespace WolfheatProductions.SoundMaster
{
    [CreateAssetMenu(menuName = "SoundMaster/SoundLibrary", fileName = "SoundLibrary")]
    public class SoundLibrary : ScriptableObject
    {
        // This enum should be generated by auto editor code from the Library
        [SerializeField] List<Sound> sounds;

        public List<Sound> Sounds => sounds;

        // Sound Lookup Dictionary 
        private Dictionary<string, Sound> lookUp = new();


#if UNITY_EDITOR
        private void OnValidate()
        {
            HashSet<string> usedStrings = new HashSet<string>();

            foreach (var sound in sounds) {
                if(sound == null)
                    continue;
                if(string.IsNullOrEmpty(sound.guid) || !usedStrings.Add(sound.guid)) {
                    Debug.Log("Setting a new GUID for "+sound.name);
                    sound.SetNewGUID();
                    EditorUtility.SetDirty(this);
                }
            }
        }
#endif


        public void GenerateLookup()
        {
            Debug.Log("Building the Lookup for "+name);
            // Generates the Lookup from each sound in the list
            foreach (var sound in sounds) {
                if(!string.IsNullOrEmpty(sound.guid) && sound.clips != null && sound.clips.Length!=0)
                lookUp[sound.guid] = sound;
            }
        }

        // Request a specific sound by enum
        public Sound GetSound(string guid)
        {
            if (lookUp == null || lookUp.Count == 0)
                GenerateLookup();   

            return lookUp.ContainsKey(guid) ? lookUp[guid] : new Sound();
        }

        public Sound GetSound(SoundName enumName) => sounds.Find(x => x.name == enumName.ToString());
    }

    [Serializable]
    public class Sound
    {
        [HideInInspector] public string guid;
        [Header("Enum")]
        public string name;

        [Header("Audio Clips")]
        public AudioClip[] clips;

        [Header("Settings")]
        [UnityEngine.Range(0f, 1f)]
        public float volume = 1f;
        [UnityEngine.Range(0.8f, 1.2f)]
        public float pitch = 1f;

#if UNITY_EDITOR

        public void SetNewGUID() => guid = System.Guid.NewGuid().ToString();
        public void EnsureGUID()
        {
            if(string.IsNullOrEmpty(guid))
                SetNewGUID();
        }

#endif
    }


    /*
    // Generated classes from the data
    public enum SoundName { None };

    // This method is generated and keeps track of how the generated enums matches the sounds guid
    public static class SoundLookup_Generated
    {
        public static Dictionary<SoundName,string> EnumToGuid = new();
    }
    */
}