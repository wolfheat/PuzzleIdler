using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using WolfheatProductions.SoundMaster;

[CustomEditor(typeof(SoundLibrary))]
public class SoundLibraryEditor : Editor
{
    public override void OnInspectorGUI()
    {
        DrawDefaultInspector();

        SoundLibrary bank = (SoundLibrary)target;        
    }
    string GetCurrentFileName([System.Runtime.CompilerServices.CallerFilePath] string fileName = null) { return fileName; }

    private void GenerateEnumAndLookup(SoundLibrary bank)
    {
        string currentFile = GetCurrentFileName(); // Change to your preferred code folder
        string currentDirectory = Directory.GetParent(currentFile).ToString(); // Change to your preferred code folder

        Debug.Log("Current folder "+currentDirectory);

        string parent = Directory.GetParent(currentDirectory).ToString(); // Change to your preferred code folder

        Debug.Log("Generating Lookup in folder "+parent);

        //string parent = GetCurrentFileName(); // Change to your preferred code folder
        //string folderPath = "Assets/Scripts/Audio"; // Change to your preferred code folder
        if (!Directory.Exists(parent))
            Directory.CreateDirectory(parent);

        // Create Individual Enum Files For each Library
        string enumName = bank.name;
        Debug.Log("EUMNAME = "+enumName);
        string fileName = enumName+".cs";

        string lookupName = enumName + "Lookup_Generated";
        string lookupFileName = lookupName + ".cs";

        string enumPath = Path.Combine(parent, fileName);
        string lookupPath = Path.Combine(parent, lookupFileName);

        var enumBuilder = new StringBuilder();
        var lookupBuilder = new StringBuilder();

        enumBuilder.AppendLine("// Auto-generated by SoundBankEditor. Do not modify manually.");
        enumBuilder.AppendLine("public enum "+enumName);
        enumBuilder.AppendLine("{");

        lookupBuilder.AppendLine("// Auto-generated by SoundBankEditor. Do not modify manually.");
        lookupBuilder.AppendLine("using System.Collections.Generic;");
        lookupBuilder.AppendLine("public static class "+lookupName);
        lookupBuilder.AppendLine("{");
        lookupBuilder.AppendLine("    public static readonly Dictionary<"+enumName+", string> IdToGuid = new()");
        lookupBuilder.AppendLine("    {");

            /*
        foreach (var entry in bank.Sounds) {
            if (entry.clips.Length == 0) continue;
#if UNITY_EDITOR
            entry.EnsureGUID(); // Make sure the entry has a GUID
#endif
            string safeName = MakeSafeEnumName(entry.name);
            enumBuilder.AppendLine($"    {safeName},");
            lookupBuilder.AppendLine($"        {{ {enumName}.{safeName}, \"{entry.guid}\" }},");
        }
            */

        enumBuilder.AppendLine("}");
        lookupBuilder.AppendLine("    };");
        lookupBuilder.AppendLine("}");

        File.WriteAllText(enumPath, enumBuilder.ToString(), Encoding.UTF8);
        File.WriteAllText(lookupPath, lookupBuilder.ToString(), Encoding.UTF8);

        EditorUtility.SetDirty(bank);
        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();

        Debug.Log($"Generated {enumPath} and {lookupPath}");
    }

    private string MakeSafeEnumName(string input)
    {
        string clean = input.Trim()
            .Replace(" ", "_")
            .Replace("-", "_")
            .Replace(".", "_");

        // Ensure it starts with a letter
        if (!char.IsLetter(clean, 0))
            clean = "_" + clean;

        return clean;
    }
}
