using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using System.Collections.Generic;
using WolfheatProductions.SoundMaster;

[CustomEditor(typeof(SoundMaster))]
public class SoundMasterEditor : Editor
{
    public override void OnInspectorGUI()
    {
        DrawDefaultInspector();

        if (GUILayout.Button("Generate Sound Enums")) {
            SoundMaster master = (SoundMaster)target;
            GenerateEnums(master);
        }
    }

    private void GenerateEnums(SoundMaster master)
    {
        if (master == null) {
            Debug.LogError("SoundMaster is null!");
            return;
        }
        // 🔍 Locate the SoundMaster.cs script in the project
        string soundMasterScriptPath = FindSoundMasterScriptPath();
        if (string.IsNullOrEmpty(soundMasterScriptPath)) {
            Debug.LogError("Could not locate SoundMaster.cs script in project.");
            return;
        }

        // Determine output folder (same as SoundMaster.cs)
        string outputFolder = Path.GetDirectoryName(soundMasterScriptPath);
        string outputPath = Path.Combine(outputFolder, "SoundEnums_Generated.cs");

        HashSet<string> soundNames = new HashSet<string>();
        HashSet<string> musicNames = new HashSet<string>();

        // Collect sound names
        foreach (var library in master.SoundLibraries) {
            if (library == null) continue;

            foreach (var sound in library.Sounds) {
                if (sound == null || string.IsNullOrWhiteSpace(sound.name)) continue;
                soundNames.Add(MakeSafeEnumName(sound.name));
            }
        }

        // Collect music names
        if (master.MusicLibrary != null) {
            foreach (var sound in master.MusicLibrary.Sounds) {
                if (sound == null || string.IsNullOrWhiteSpace(sound.name)) continue;
                musicNames.Add(MakeSafeEnumName(sound.name));
            }
        }

        var sb = new StringBuilder();
        sb.AppendLine("// Auto-generated by SoundMasterEditor. Do not modify manually.");
        sb.AppendLine("namespace WolfheatProductions.SoundMaster");
        sb.AppendLine("{");

        // SoundName Enum
        sb.AppendLine("    public enum SoundName");
        sb.AppendLine("    {");
        foreach (var name in soundNames)
            sb.AppendLine($"        {name},");
        sb.AppendLine("    }");
        sb.AppendLine();

        // MusicName Enum
        sb.AppendLine("    public enum MusicName");
        sb.AppendLine("    {");
        foreach (var name in musicNames)
            sb.AppendLine($"        {name},");
        sb.AppendLine("    }");

        sb.AppendLine("}");

        File.WriteAllText(outputPath, sb.ToString(), Encoding.UTF8);
        AssetDatabase.Refresh();

        Debug.Log($"✅ Generated SoundEnums_Generated.cs with {soundNames.Count} sounds and {musicNames.Count} music entries.");
    }
    private static string FindSoundMasterScriptPath()
    {
        string[] results = AssetDatabase.FindAssets("SoundMaster t:Script");
        foreach (string guid in results) {
            string path = AssetDatabase.GUIDToAssetPath(guid);
            if (Path.GetFileNameWithoutExtension(path) == "SoundMaster")
                return path;
        }
        return null;
    }
    private string MakeSafeEnumName(string input)
    {
        string clean = input.Trim()
            .Replace(" ", "_")
            .Replace("-", "_")
            .Replace(".", "_")
            .Replace("/", "_");

        // Must start with a letter
        if (!char.IsLetter(clean[0]))
            clean = "_" + clean;

        // Remove illegal characters
        StringBuilder sb = new StringBuilder();
        foreach (char c in clean) {
            if (char.IsLetterOrDigit(c) || c == '_')
                sb.Append(c);
        }

        return sb.ToString();
    }
}
